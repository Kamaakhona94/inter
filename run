def run(self):
    if not self.initialize():
        self.log_error("initialization", "Failed to initialize bot", True)
        return
        
    while True:
        try:
            if self.pause_trading:
                self.logger.info("Trading paused. Press 'r' to resume or wait 300s...")
                time.sleep(300)
                continue

            self.update_chart()
            daily_pnl = self.calculate_daily_pnl()
            if (daily_pnl < self.config.max_daily_loss or 
                self.performance.consecutive_losses >= self.max_consecutive_losses):
                self.logger.warning(f"Daily loss limit or max consecutive losses reached: ${daily_pnl:.2f}")
                self.close_all_positions()
                time.sleep(300)
                continue
                
            rates = mt5.copy_rates_from_pos(self.config.symbol, mt5.TIMEFRAME_H1, 0, 10)
            if len(rates) > 1:
                df = pd.DataFrame(rates)
                price_change = ((df.iloc[0]['close'] - df.iloc[1]['close']) / 
                             df.iloc[1]['close'] * 100)
                
                current_positions = len(mt5.positions_get(symbol=self.config.symbol))
                if current_positions == 0:
                    self._handle_trading_signals(price_change)
                    
            self.error_stats.consecutive_errors = 0
            # Check for pause/resume input
            if msvcrt.kbhit():  # Requires Windows; use getch for cross-platform
                key = msvcrt.getch().decode('utf-8').lower()
                if key == 'p':
                    self.toggle_pause()
                elif key == 'r' and self.pause_trading:
                    self.toggle_pause()
                    
        except Exception as e:
            self.log_error("runtime", str(e), True)
            if "connection" in str(e).lower():
                if not self.connect():
                    self.log_error("connection", "Failed to reconnect", True)
                    break
            time.sleep(10)
            continue
        
        time.sleep(self.config.check_interval)
